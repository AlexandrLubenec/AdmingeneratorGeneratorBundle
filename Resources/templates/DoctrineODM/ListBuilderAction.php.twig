{% extends '../CommonAdmin/ListAction/ListBuilderAction.php.twig' %}
{% block pager_adapter -%}
use Pagerfanta\Adapter\DoctrineODMMongoDBAdapter as PagerAdapter;
{% endblock %}
{% block getQuery -%}
    protected function getQuery()
    {
        $query = $this->getDocumentManager()
                      ->createQueryBuilder('{{ model }}');


        $this->processSort($query);
        $this->processFilters($query);
        {% if scopes is defined -%}
        $this->processScopes($query);
        {% endif -%}

        return $query;
    }
{% endblock %}

{% block processSort -%}
    protected function processSort($query)
    {
        if ($this->getSortColumn()) {
            if (!strstr($this->getSortColumn(), '.')) { //direct column
                $query->sort($this->getSortColumn(), $this->getSortOrder());
            } else {
                /* TODO FOR MONGO
                list($table, $column) = explode('.', $this->getSortColumn(), 2);
                $this->addJoinFor($table, $query);
                $query->sort($this->getSortColumn(), $this->getSortOrder());*/
            }
        }
    }
{% endblock %}

{% block getFilterForm -%}
    protected function getFilterForm()
    {
        $filters = $this->getFilters();

        {%- for filter in builder.filters.display -%}
            {%- if 'document' == builder.getFieldGuesser().getDbType(model, filter) or 'collection' == builder.getFieldGuesser().getDbType(model, filter) -%}

        if (isset($filters['{{ filter }}'])) {
             $this->getDocumentManager()->getUnitOfWork()->registerManaged($filters['{{ filter }}'], array($filters['{{ filter }}']->getId()), array());
        }

            {%- endif %}

        {% endfor -%}

        $type = new FiltersType();
        $type->setSecurityContext($this->get('security.context'));

        return $this->createForm($type, $this->getFilters());
    }
{% endblock %}

{% block addJoinFor -%}
    protected function addJoinFor($table, $query)
    {
        $query->leftJoin('q.'.$table, $table);
    }
{% endblock %}

{% block processFilters -%}
    protected function processFilters($query)
    {
        $filterObject = $this->getFilters();

        $queryFilter = $this->get('admingenerator.queryfilter.doctrine_odm');
        $queryFilter->setQuery($query);

        {% for filter in builder.filterColumns %}

        if (isset($filterObject['{{ filter.name }}']) && null !== $filterObject['{{ filter.name }}']) {
            $queryFilter->add{{ filter.dbType|classify }}Filter("{{ filter.filterOn }}", $filterObject['{{ filter.name }}']);
        }
        {% endfor %}

    }
{% endblock %}

{% block processScopes -%}
    {% if scopes is defined -%}
    protected function processScopes($query)
    {
        $scopes = $this->getScopes();

        $queryFilter = $this->get('admingenerator.queryfilter.doctrine_odm');
        $queryFilter->setQuery($query);


        {% for groupName, group in scopes -%}
            {%- for scopeName, params in group %}

        if (isset($scopes['{{ groupName }}']) && $scopes['{{ groupName }}'] == '{{ scopeName }}') {
            {% if params["filters"] is defined -%}
                {%- for filter, filterParams in params["filters"] -%}
                {%- if filter|is_numeric -%}
                $this->scope{{ filterParams|classify }}($queryFilter);
                {%- else -%}
                $queryFilter->addDefaultFilter("{{ filter }}", {{ filterParams|as_php }});
                {%- endif -%}
                {%- endfor -%}
            {%- endif %}

        }
            {% endfor -%}
        {%- endfor -%}
    }

    {% for groupName, group in scopes -%}
        {%- for scopeName, params in group %}
            {% if params["filters"] is defined -%}
            {%- for filter, filterParams in params["filters"] -%}
                {%- if filter|is_numeric -%}
    /**
    * Add the filters to the query for {{ groupName }} => {{ scopeName }}
    *
    * @param queryFilter the queryFilter
    */
    protected function scope{{ filterParams|classify }}($query)
    {
    }

                {%- endif -%}
            {%- endfor -%}
            {%- endif -%}
        {% endfor -%}
    {%- endfor -%}
    {%- endif %}
{% endblock %}
